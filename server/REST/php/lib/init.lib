<?php

require_once('sql.lib');

class REST {

	protected static $URL_MATCH = array();

	protected static $GET_ARGS  = array();
	protected static $POST_ARGS = array();

	private $_config;
	protected $db;

	public function __construct() {

		$this->load_config();
		$this->load_db();
	}

	public static function handle () {

		$rest_class = get_called_class();

		$handler = new $rest_class();

		$method = $_SERVER['REQUEST_METHOD'];

		if (! method_exists($handler,$method)) {
			self::send_error_message("$method not supported for $rest_class");
		}

		$arguments = array();

		$source = $list = NULL;

		$url_match = NULL;
		if (array_key_exists($method,static::$URL_MATCH)) {
			$url_match = static::$URL_MATCH[$method];
		} else if (array_key_exists('',static::$URL_MATCH)) {
			$url_match = static::$URL_MATCH[''];
		}

		switch ($method) {
			case 'POST':
				
				//PHP does not understand application/json,
				//thought about using the PECL json_post but that would require
				//a system wide change or a specific PHP handler, eg php-fpm, too much effort required

				if (isset($_POST['data'])) {
					$source = json_decode($_POST['data'],TRUE);

					if ($source === NULL) {
						self::send_error_message('Invalid JSON');
					}
				} else {
					self::send_error_message('missing json encoded \'data\' variable');
				}

				$list   =  static::$POST_ARGS;
				break;
			case 'GET':
				$source =& $_GET;
				$list   =  static::$GET_ARGS;
				break;
		}

		if ($url_match) {
			if (preg_match($url_match,$_SERVER['REQUEST_URI'],$m)) {
				$arguments = $m;
				array_shift($arguments);
			} else {
				self::send_error_message('Must match ' . $url_match);
			}
		}

		$required_args_error_message = array();

		foreach ($list as $arg_name => $required) {
			if (array_key_exists($arg_name,$source)) {
				$arguments[] = $source[$arg_name];
			} else if($required) {
				$required_args_error_message[] = $arg_name;
			} else {
				$arguments[] = NULL;
			}
		}

		if (! empty($required_args_error_message)) {
			self::send_error_message('Missing required arguments ' . implode(', ',$required_args_error_message));
		}


		call_user_func_array(array($handler,$method),$arguments);

	}

	private function load_config() {
		//TODO - mkpath
		$config_file = '../../../../config.ini';

		if (
			   ! file_exists($config_file)
			|| ! is_readable($config_file)
			|| ($this->_config = parse_ini_file($config_file,TRUE)) === FALSE
		) {
			self::die_error_message('Invalid config file ' . $config_file,500);
		}

		$this->_config = array_change_key_case($this->_config,CASE_LOWER);

		foreach ($this->_config as $section => $values) {
			$this->_config[$section] = array_change_key_case($values,CASE_LOWER);
		}
	}

	protected function config($section,$key) {
		$section = strtolower($section);

		if (! array_key_exists($section,$this->_config)) {
			self::die_error_message("Section {$section} does not exist in config");
		}

		if ($key === NULL) {
			return $this->_config[$section];
		}

		if (! array_key_exists($key,$this->_config[$section])) {
			self::die_error_message("Key {$key} does not exist in section {$section} in config");
		}

		return $this->_config[$section][$key];

	}

	protected function die_error_message($message) {

		error_log($message);

		http_response_code(500);
		exit(0);

	}

	protected static function send_error_message($message,$code=400) {

		//TODO - rollback DB if required

		if ($message) {
			print $message . "\n";
			//TODO - custom header?
			//     - JSON?

		}
		http_response_code($code);
		exit(0);
	}

	/**
	 * @returns PDO
	 */
	private function load_db() {

		//defaults
		$connection['type'] = 'mysql';
		$connection['host'] = 'localhost';

		foreach ($this->config('db',NULL) as $key => $value) {
			$connection[$key] = $value;
		}

		if (
			   ! isset($connection['type'])
			|| ! isset($connection['host'])
			|| ! isset($connection['name'])
			|| ! isset($connection['user'])
			|| ! isset($connection['pass'])
		) {
			self::die_error_message('Invalid database config',500);
		}

		try {
			$this->db = new PDO($connection['type'] . ':host=' . $connection['host'] . ';dbname=' . $connection['name'],$connection['user'],$connection['pass']);
		} catch(PDOException $e) {
			self::die_error_message($e->getMessage(),500);
		}

	}
}


